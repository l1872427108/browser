(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{417:function(t,s,a){"use strict";a.r(s);var e=a(56),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"xss-攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss-攻击"}},[t._v("#")]),t._v(" XSS 攻击")]),t._v(" "),a("p",[t._v("XSS 全称 Cross Site Scripting(跨站脚本), 为了和 CSS 区分，才叫做 XSS。XSS 攻击时指浏览器中执行恶意脚本（无论是跨域还是同域），从而拿到用户的信息并进行操作。")]),t._v(" "),a("h2",{attrs:{id:"可以完成的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可以完成的操作"}},[t._v("#")]),t._v(" 可以完成的操作")]),t._v(" "),a("ol",[a("li",[t._v("窃取 Cookie. 通过 document.cookie 获取信息。然后通过 XMLHttpRequest 或者 Fetch 加上 CORS 功能将数据发送给恶意服务器。")]),t._v(" "),a("li",[t._v("监听用户行为，可以使用 addEventListener 接口来监听键盘事件，比如可以获取用户输入的信用卡信息，将其发送给恶意服务器。")]),t._v(" "),a("li",[t._v("修改 DOM 伪造登录表单， 用来欺骗用户名和密码等信息。")]),t._v(" "),a("li",[t._v("在页面中生成浮动窗口广告。严重影响用户体验。")])]),t._v(" "),a("p",[t._v("如果页面插入了恶意脚本，就相当于把我们的页面的隐私数据和行为完全暴露给黑客了。")]),t._v(" "),a("p",[t._v("只有知道了有哪些注入方式，才能够更好的预防。XSS 攻击实现有三种方式 --- 存储型、反射型 和 文档型。")]),t._v(" "),a("h2",{attrs:{id:"存储型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储型"}},[t._v("#")]),t._v(" 存储型")]),t._v(" "),a("p",[t._v("存储型，就是将恶意脚本存储起来，存储型的 XSS 将脚本存储到服务端的数据库，然后在客户端执行这些脚本，从而达到攻击的效果。")]),t._v(" "),a("p",[t._v("步骤：")]),t._v(" "),a("ul",[a("li",[t._v("黑客利用站点漏洞将恶意 js 提交到网站的数据库中。")]),t._v(" "),a("li",[t._v("用户请求包含恶意 js 脚本的页面。")]),t._v(" "),a("li",[t._v("当用户浏览该页面的时，恶意脚本将用户 cookie 等上传到服务器。")])]),t._v(" "),a("p",[t._v("常见的场景是留言评论区提交一段脚本代码，如果前后端没有做好转义工作，那评论就会拿到数据库，在页面渲染的过程中直接执行一段未知的逻辑，是非常恐怖的。")]),t._v(" "),a("p",[t._v("2015年喜马拉雅就被曝出了存储型 XSS 漏洞。 起因是在用户设置专辑名称时，服务器对关键字过滤不严格，比如设置为一段js脚本。当提交后，喜马拉雅服务器保存该字段到数据库。当用户打开后，这段代码在用户的页面执行，就可以获取用户 Cookie。 恶意脚本可以通过 XML 或 Fetch 将用户的 Cookie 数据上传到黑客的服务器。拿到之后就可以伪造用户上网。")]),t._v(" "),a("h2",{attrs:{id:"反射型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射型"}},[t._v("#")]),t._v(" 反射型")]),t._v(" "),a("p",[t._v("在一个反射型 XSS 攻击过程中，恶意 JavaScript 脚本属于用户发送给网站请求中的一部分，随后网站又把恶意 JavaScript 脚本返回给用户。当恶意 JavaScript 脚本在用户页面中被执行时，黑客就可以利用该脚本做一些恶意操作。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("localhost"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("xss"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'你被劫持了'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("通过这个操作，用户将一段含有恶意代码的请求提交给Web服务器，Web服务器接收到请求时，将恶意代码反射给浏览器端，这就是反射XSS攻击。")]),t._v(" "),a("p",[t._v("黑客经常会通过QQ群或者邮件等渠道诱导用户去点击这些恶意链接。")]),t._v(" "),a("p",[t._v("Web 服务器不会存储这些恶意脚本。")]),t._v(" "),a("h2",{attrs:{id:"文档型-基于-dom-的-xss-攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文档型-基于-dom-的-xss-攻击"}},[t._v("#")]),t._v(" 文档型(基于 DOM 的 XSS 攻击)")]),t._v(" "),a("p",[t._v("基于 DOM 的 XSS 攻击是不牵涉到页面 Web 服务器的。\n文档型的 XSS 攻击不会经过 服务端，而是作为中间人的角色，在数据传输过程劫持到网络数据包，然后修改里面的 html 文档。")]),t._v(" "),a("p",[t._v("黑客通过各种手段将恶意脚本注入用户的页面中，比如通过网络劫持在页面传输过程中修改 HTML 页面的内容，这种劫持类型很多，有通过 WiFi 路由器劫持的，有通过本地恶意软件来劫持的，它们的共同点是在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据。")]),t._v(" "),a("p",[t._v("这样的劫持方式包括： WIFI 路由劫持 或者 本地恶意软件 等.")]),t._v(" "),a("h2",{attrs:{id:"措施"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#措施"}},[t._v("#")]),t._v(" 措施")]),t._v(" "),a("p",[t._v("存储型XSS攻击和反射型XSS攻击都是需要经过Web服务器处理的，这两种可以认为是服务器端漏洞。而基于DOM的XSS攻击时在浏览器端完成的，属于是前端的安全漏洞。")]),t._v(" "),a("p",[t._v("共同点都是往浏览器中注入恶意脚本，然后再通过恶意脚本将用户信息发送到黑客部署的服务器上。")]),t._v(" "),a("p",[t._v("通过阻止恶意 JavaScript 脚本的注入和恶意消息的发送来实现。")]),t._v(" "),a("ol",[a("li",[t._v("服务器对输入脚本进行过滤或转码\n不管是反射型还是存储型 XSS 攻击， 我们都可以在服务器端将一些关键的字符进行转码")])]),t._v(" "),a("p",[t._v("过滤掉标签或者是转移 <script>")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("利用 CSP\n完全依靠服务器端是不够的，还需要把CSP等策略充分利用起来，降低XSS攻击带来的风险。\nCSP 是浏览器的内容安全策略，核心思想就是服务器来决定浏览器加载哪些资源。")])]),t._v(" "),a("ul",[a("li",[t._v("限制加载其他域下的资源文件，这样即使黑客插入一个js文件，也是我无法加载的。")]),t._v(" "),a("li",[t._v("禁止向第三方域提交数据，数据就不会泄露。")]),t._v(" "),a("li",[t._v("禁止执行内联脚本和未授权的脚本")]),t._v(" "),a("li",[t._v("提供上报机制，帮助及时发现 XSS 攻击。")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("利用 HttpOnly\n很多 XSS 攻击脚本都是用来读取 Cookie 的，而设置 Cookie 的 HttpOnly 属性后， js 便无法读取 Cookie 的值，很好的防御 XSS 攻击。")])]),t._v(" "),a("p",[t._v("通过服务器可以将某些 Cookie 设置为 HttpOnly 标志，HttpOnly 是服务器通过 HTTP 响应头来设置的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("set-cookie: NID=189=M8q2jUx...; path=/;domain=.puge.cn;HttpOnly\n")])])]),a("p",[t._v("set-cookie 属性值最后使用了 HttpOnly 来标记该 Cookie, 用 HttpOnly 标记的 Cookie 只能使用在 HTTP 请求过程中，所以无法通过 JavaScript 来读取这段 Cookie。")]),t._v(" "),a("p",[t._v("NID 这个 Cookie 的 HttpOlny 属性是被勾选上的，所以 NID 的内容是无法通过 document.cookie 是来读取的。")]),t._v(" "),a("h3",{attrs:{id:"跨站攻击-前端承担的责任大吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨站攻击-前端承担的责任大吗"}},[t._v("#")]),t._v(" 跨站攻击，前端承担的责任大吗")]),t._v(" "),a("p",[t._v("对于三种方式：DOM攻击可以归属于前端，但是属于浏览器插件，传输过程中被串改，权限要大，直接修改东西。")])])}),[],!1,null,null,null);s.default=r.exports}}]);