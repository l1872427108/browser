(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{438:function(t,s,a){"use strict";a.r(s);var n=a(56),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"跨域解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域解决方案"}},[t._v("#")]),t._v(" 跨域解决方案")]),t._v(" "),a("h3",{attrs:{id:"同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),a("p",[t._v("如果两个 URL 的协议、域名和端口都相同，这两个 URL 同源。")]),t._v(" "),a("p",[t._v("浏览器默认两个相同的源之间是可以相互访问资源和操作DOM的。")]),t._v(" "),a("p",[t._v("同源策略主要表现的方面：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("DOM层面。同源策略限制来自不同源的 JavaScript 脚本对当前 DOM 对象读和写的操作。")])]),t._v(" "),a("li",[a("code",[t._v("数据层面。同源策略限制了不同源的站点的 Cookie、IndexDB、LocalStorage等数据。")])]),t._v(" "),a("li",[a("code",[t._v("网络层面。同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点。")])])]),t._v(" "),a("h3",{attrs:{id:"jsonp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" JSONP")]),t._v(" "),a("p",[t._v('通过同源策略涉及不到的"漏洞", 资源文件请求 script，img，link，iframe 加载都不会被同源策略限制到。不存在跨域请求的限制。')]),t._v(" "),a("p",[t._v("前端通过动态创建 script标签，以callback=func 的形式传给后端，后端通过 query 拿到 callback，组装数据，JSON.stringify(data), 传递给前端。")]),t._v(" "),a("p",[t._v("浏览器拿到结果，就会把这个函数执行，函数执行（必须是放在全局下面的函数），就可以获取到 data 数据了。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" script "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nscript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://xxx.xxxx.com/list?callback=func'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后段")]),t._v("\n解析 callback拿到 func\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("组装")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("func(")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n")])])]),a("p",[t._v("利用 jquery")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("url")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://xxx.xxxx.com/list'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("dataType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jsonp'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("success")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n后端： \njquery 会帮助我们创建一个不带缓存的函数。\n组装之后： 浏览器拿到结果，就会把这个函数执行，会执行 success 函数，拿到 data 数据。\n")])])]),a("p",[t._v("缺点：")]),t._v(" "),a("ol",[a("li",[t._v("资源文件请求，jsonp 只能处理 get 请求。")]),t._v(" "),a("li",[t._v("url 传给服务器，在过程中可能发生 url 劫持， 安全性不是很好。")]),t._v(" "),a("li",[t._v("需要后端的配合。")])]),t._v(" "),a("h3",{attrs:{id:"cors-跨域资源共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors-跨域资源共享"}},[t._v("#")]),t._v(" CORS 跨域资源共享")]),t._v(" "),a("p",[t._v("允许浏览器向跨域的服务器发松 XMLHttpRequest 请求。")]),t._v(" "),a("p",[t._v("它需要浏览器和服务器同步支持。对于开发人员来说与普通发送请求没什么区别。浏览器一旦发现 AJAX 请求跨域了，就会自动添加一些附加的头信息，有时候还会多出一次附加的请求。只要服务器实现了 CORS 接口，就可以跨域通信。")]),t._v(" "),a("p",[t._v("CORS 请求分为两类： 简单请求 和 非简单请求")]),t._v(" "),a("h3",{attrs:{id:"简单请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单请求"}},[t._v("#")]),t._v(" 简单请求")]),t._v(" "),a("p",[t._v("满足一下两大条件，就属于简单请求")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("请求方法是")]),t._v(" "),a("p",[t._v("HEAD、GET、POST")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("HTTP 的头信息是")]),t._v(" "),a("ul",[a("li",[t._v("Accept")]),t._v(" "),a("li",[t._v("Accept-Language")]),t._v(" "),a("li",[t._v("Content-Language")]),t._v(" "),a("li",[t._v("Last-Event-ID")]),t._v(" "),a("li",[t._v("Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain")])])]),t._v(" "),a("p",[t._v("对于非简单请求，浏览器会采用新的处理方式。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("请求过程：")]),t._v(" "),a("ul",[a("li",[t._v("浏览器直接发出 CORS 请求, 会在头部添加 Origin字段:")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("cors "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Origin")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("api"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Host")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" api"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\nAccept"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Language"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" en"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("US")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Connection")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" keep"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("alive\nUser"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Agent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Mozilla"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])])]),a("p",[t._v("服务器根据 Origin 来判断本次请求的是哪个域。服务器根据这个值，决定是否同意这次请求。")]),t._v(" "),a("ul",[a("li",[t._v("如果不在范围")])]),t._v(" "),a("p",[t._v("服务器返回一个正常的 HTTP 响应。浏览器发现头部没有 Access-Control-Allow-Origin\n字段。就知道出错了从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获.注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。")]),t._v(" "),a("ul",[a("li",[t._v("如果 Origin 在范围内(服务器返回的响应，头部会多出几个东西。)")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Access"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("api"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\nAccess"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Credentials"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nAccess"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Expose"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Headers"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" FooBar\nContent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" charset"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n")])])]),a("p",[t._v("Access-Control-Allow-Origin: 该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。")]),t._v(" "),a("p",[t._v("Access-Control-Allow-Credentials: 该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。")]),t._v(" "),a("p",[t._v("Access-Control-Expose-Headers: 该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader('FooBar')可以返回FooBar字段的值。")])]),t._v(" "),a("ul",[a("li",[t._v("withCredentials:")])]),t._v(" "),a("p",[t._v("CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段。")]),t._v(" "),a("p",[t._v("另一方面，开发者必须在AJAX请求中打开withCredentials属性。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("withCredentials "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。")]),t._v(" "),a("p",[t._v("但是，如果省略withCredentials设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭withCredentials。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("withCredentials "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。")]),t._v(" "),a("h3",{attrs:{id:"非简单请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非简单请求"}},[t._v("#")]),t._v(" 非简单请求")]),t._v(" "),a("p",[t._v("非简单请求，会在正式通信之前，增加一次 HTTP 查询请求，称为预检请求。浏览器会先询问服务器，当前网页所在的域名是否在许可范围中，以及可以使用哪些HTTP 动词和头信息字段，只要又了答复，浏览器才会发出正式的 XMLHttpRequest 请求。这样是为了防止新增的请求，对传统的没有 CORS 支持的服务器形成压力。服务器一个提前拒绝的机会，这样可以防止服务器大量收到DELETE和PUT请求.")]),t._v(" "),a("p",[t._v("请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json. 是非简单请求。")]),t._v(" "),a("p",[t._v("“预检”请求用的请求方法是OPTIONS, 表示这个请求是用来询问的.")]),t._v(" "),a("p",[t._v("“预检”请求的头信息包括两个特殊字段:")]),t._v(" "),a("ol",[a("li",[t._v("Access-Control-Request-Method 表示浏览器的 CORS 请求用到哪些请求方法。")]),t._v(" "),a("li",[t._v("Access-Control-Request-Headers 指定浏览器 CORS 请求会额外发送的头信息字段.")])]),t._v(" "),a("p",[a("code",[t._v("预检请求的回应:")])]),t._v(" "),a("p",[t._v('服务器收到"预检"请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。')]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ul",[a("li",[t._v("HTTP/1.1 200 OK")]),t._v(" "),a("li",[t._v("Date: Mon, 01 Dec 2008 01:15:39 GMT")]),t._v(" "),a("li",[t._v("Server: Apache/2.0.61 (Unix)")]),t._v(" "),a("li",[t._v("Access-Control-Allow-Origin: http://api.bob.com")]),t._v(" "),a("li",[t._v("Access-Control-Allow-Methods: GET, POST, PUT")]),t._v(" "),a("li",[t._v("Access-Control-Allow-Headers: X-Custom-Header")]),t._v(" "),a("li",[t._v("Content-Type: text/html; charset=utf-8")]),t._v(" "),a("li",[t._v("Content-Encoding: gzip")]),t._v(" "),a("li",[t._v("Content-Length: 0")]),t._v(" "),a("li",[t._v("Keep-Alive: timeout=2, max=100")]),t._v(" "),a("li",[t._v("Connection: Keep-Alive")]),t._v(" "),a("li",[t._v("Content-Type: text/plain")])])]),t._v(" "),a("ol",[a("li",[t._v("Access-Control-Allow-Origin\n表示http://api.bob.com可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Access-Control-Allow-Origin: *\n")])])]),a("p",[t._v('如果服务器否定了"预检"请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。')]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v('Access-Control-Allow-Methods\n该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次"预检"请求。')])]),t._v(" "),a("li",[a("p",[t._v('Access-Control-Allow-Headers\n如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在"预检"中请求的字段。')])]),t._v(" "),a("li",[a("p",[t._v("Access-Control-Allow-Credentials\n该字段与简单请求时的含义相同。")])]),t._v(" "),a("li",[a("p",[t._v("Access-Control-Max-Age\n该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。")])])]),t._v(" "),a("p",[t._v('一旦服务器通过了"预检"请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。')]),t._v(" "),a("p",[t._v('下面是"预检"请求之后，浏览器的正常CORS请求。')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("PUT /cors HTTP/1.1\nOrigin: http://api.bob.com    Origin字段是浏览器自动添加的\nHost: api.alice.com\nX-Custom-Header: value\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n")])])]),a("p",[t._v("下面是服务器正常的回应。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Access-Control-Allow-Origin: http://api.bob.com\nContent-Type: text/html; charset=utf-8\n")])])]),a("h3",{attrs:{id:"http-proxy-webpack-webpack-dev-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-proxy-webpack-webpack-dev-server"}},[t._v("#")]),t._v(" http proxy  webpack webpack-dev-server")]),t._v(" "),a("p",[t._v("通过 webpack-dev-server  node 服务器帮助我们启动一个服务器，dev-server 也是 node 写的，会在中间价里帮助我们处理请求跨域处理。")]),t._v(" "),a("h3",{attrs:{id:"nginx-反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-反向代理"}},[t._v("#")]),t._v(" nginx 反向代理")]),t._v(" "),a("p",[t._v("反向代理拿到客户端的请求，将请求转发给其他的服务器。主要的场景是用来维护服务器集群的负载均衡。")]),t._v(" "),a("p",[t._v("比如现在有一个域名 a.com, 服务器的域名为 b.com, 客户端向服务器发送 Ajax 请求。就会产生跨域，这个时候就需要使用 Nginx 了。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    location "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("api "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        proxy_pass b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("Nginx 相当于是一个跳板机，跳板机的域名也是 a.com , 让客户端访问 a.com/api, 不会产生跨域的，然后 Nginx 服务器作为反向代理，将请求转发给 b.com, 当响应返回时将响应给到客户端。")]),t._v(" "),a("h3",{attrs:{id:"postmessage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#postmessage"}},[t._v("#")]),t._v(" postMessage")]),t._v(" "),a("p",[t._v("A 窗口和 B 窗口进行通信发送数据, 把 B 页面嵌入到 A 页面中， 监听 B（iframe）onload 事件，")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("页面\niframe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("contentWindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'数据'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://xxxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("ev")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("页面接收 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("页面发来的数据\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("ev")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("source "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A页面")]),t._v("\n    ev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("B 窗口进行 message 监听，监听到了以同样的方式返回数据。")]),t._v(" "),a("p",[t._v("A 窗口监听到 message， 在进行操作。")])])}),[],!1,null,null,null);s.default=e.exports}}]);